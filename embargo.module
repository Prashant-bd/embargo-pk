<?php

/**
 * @file
 * Hook implementations.
 */

use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\embargo\EmbargoStorage;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_type_alter().
 */
function embargo_entity_type_alter(array &$entity_types) {
  $applicable_entity_types = EmbargoStorage::applicableEntityTypes();
  foreach ($applicable_entity_types as $entity_type_id) {
    $entity_type = &$entity_types[$entity_type_id];
    $entity_type->setLinkTemplate('embargoes', "/embargo/$entity_type_id/{{$entity_type_id}}");
  }
}

/**
 * Implements hook_entity_access().
 */
function embargo_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\embargo\Access\EmbargoAccessCheckInterface $service */
  $service = \Drupal::service('access_check.embargo');
  return $service->access($entity, $account);
}

/**
 * Implements hook_file_download().
 */
function embargo_file_download($uri) {
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  $file = reset($files);
  if ($file instanceof EntityInterface) {
    $access = \Drupal::service('access_check.embargo')->access($file, \Drupal::currentUser());
    if ($access->isForbidden()) {
      return -1;
    }
  }
}

/**
 * Implements hook_query_TAG_alter() for `node_access` tagged queries.
 */
function embargo_query_node_access_alter(AlterableInterface $query) {
  /** @var \Drupal\embargo\Access\QueryTagger $tagger */
  $tagger = \Drupal::service('embargo.query_tagger');
  $tagger->tagAccess($query, 'node');
}

/**
 * Implements hook_query_TAG_alter() for `media_access` tagged queries.
 */
function embargo_query_media_access_alter(AlterableInterface $query) {
  /** @var \Drupal\embargo\Access\QueryTagger $tagger */
  $tagger = \Drupal::service('embargo.query_tagger');
  $tagger->tagAccess($query, 'media');
}

/**
 * Implements hook_query_TAG_alter() for `file_access` tagged queries.
 */
function embargo_query_file_access_alter(AlterableInterface $query) {
  /** @var \Drupal\embargo\Access\QueryTagger $tagger */
  $tagger = \Drupal::service('embargo.query_tagger');
  $tagger->tagAccess($query, 'file');
}

/**
 * Implements hook_theme().
 */
function embargo_theme($existing, $type, $theme, $path) {
  return [
    'embargo_ip_access_exemption' => [
      'template' => 'embargo-ip-access-exemption',
      'variables' => [
        // A list of resource names.
        'resources' => [],
        // A list of embargo_ip_range entity identifers.
        'ranges' => [],
        'contact_email' => NULL,
      ],
    ],
    'embargo_notification' => [
      'template' => 'embargo-notification',
      'variables' => [
        'embargoes' => [],
        'message' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function embargo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'embargo_add_form' || $form_id == 'embargo_edit_form') {
    // Set up visibility conditions for the embargoed_file field.
    $form['embargoed_file']['#states'] = [
      'visible' => [
        ':input[name="embargo_type"]' => ['value' => 0],
      ],
    ];

    // Check if the URL contains a node ID.
    $node_id = \Drupal::routeMatch()->getParameter('node');

    if ($node_id instanceof \Drupal\node\NodeInterface) {
      $node_id = $node_id->id();
    }

    // If its edit form, need to select node id differently.
    if ($form_id == 'embargo_edit_form') {
      $entity = $form_state->getFormObject()->getEntity();
      $field_value = $entity->embargoed_node->getValue();
      $node_id = $field_value[0]['target_id'];
    }

    // If a node ID is present, filter the options of embargoed_file.
    if (!empty($node_id)) {
      $options = embargo_get_filtered_file_options($node_id);
      $form['embargoed_file']['widget']['#options'] = $options;
    }

    // JS to add Select/Unselect All link and functionality.
    $form['#attached']['library'][] = 'embargo/custom_select_all_library';

  }
}

/**
 * Helper function to get filtered options based on the node ID.
 */
function embargo_get_filtered_file_options($node_id) {
  // Initialize an empty array to store matching media entities.
  $matching_media = [];

  // Check if the node ID is valid.
  if (!empty($node_id)) {
    // Filter media entities based on the referenced node ID.
    $matching_media = \Drupal::entityTypeManager()
      ->getStorage('media')
      ->loadByProperties(['field_media_of' => $node_id]);
  }

  // Build an array of matching media labels and IDs for the checkbox options.
  $options = [];
  foreach ($matching_media as $media) {
    $options[$media->id()] = $media->label();
  }

  return $options;
}
